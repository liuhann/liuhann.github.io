<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hand's blog</title>
    <atom:link href="http://localhost:8080/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://localhost:8080</link>
    <description>MY CONTENTS FOR LOOK BACK</description>
    <pubDate>Sun, 13 Mar 2016 08:00:00 +0800</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>ReactJS - Template Method Pattern</title>
      <link>http://localhost:8080/articles/20160313-react-abstract-method/</link>
      <pubDate>Sun, 13 Mar 2016 08:00:00 +0800</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/20160313-react-abstract-method/</guid>
      <author></author>
      <description>&lt;p&gt;The Template Method Pattern let you redefine certain steps of an algorithm without changing the algorithm’s structure. It is important for the UI design&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/20160313-react-abstract-method/preview.png&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-using-mixin-as-the-parent-class&quot;&gt;1 Using mixin as the parent class&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;var parentMixin = {
    render: function () {
        var abstract = this.abstractMethod();
        return (
            &amp;lt;div&amp;gt;
                ..html code here
                {editor}
                ..other html 
            &amp;lt;/div&amp;gt;
        );
    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;the parentMixin make the abstractMethod which is implemented by the children . As the children like this:&lt;/p&gt;
&lt;h2 id=&quot;2-implement-method-at-children&quot;&gt;2 Implement method at children&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;var Child = React.createClass({
    mixins: [parentMixin], // Use the mixin
    abstractMethod: function() {
           // implementation
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So the children has no render() method. In stead it has method abstractMethod().  The common code is put in the mixin and the child’s row is ‘fill the block’&lt;/p&gt;
&lt;h2 id=&quot;3-detect-method-existing&quot;&gt;3 Detect method existing&lt;/h2&gt;
&lt;p&gt;We can add some check code at the render() of mixin&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var parentMixin = {
    render: function () {
        /**Check method*/
        if(!_.isFunction(this.abstractMethod)) {
             return &amp;lt;div&amp;gt;
                 Your component require to implement abstractMethod() method
             &amp;lt;/div&amp;gt;;
        }
        var abstract = this.abstractMethod();
        return (
            &amp;lt;div&amp;gt;
                ..html code here
                {editor}
                ..other html 
            &amp;lt;/div&amp;gt;
        );
    }
};
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>In class student login and group effects</title>
      <link>http://localhost:8080/articles/20160310-inclass-students/</link>
      <pubDate>Tue, 01 Mar 2016 08:00:00 +0800</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/20160310-inclass-students/</guid>
      <author></author>
      <description>&lt;p&gt;A work of me from screen cast show.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/20160310-inclass-students/preview.png&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>An animation css from toptal.com - jelly</title>
      <link>http://localhost:8080/articles/20160224-jelly-animation/</link>
      <pubDate>Wed, 24 Feb 2016 08:00:00 +0800</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/20160224-jelly-animation/</guid>
      <author></author>
      <description>&lt;p&gt;A quite smooth and relax animation. The animation code is long but it’s worthy&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/20160224-jelly-animation/preview.png&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;codes&quot;&gt;Codes&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;.jelly-animation {
    -webkit-animation: jelly-answer 1s ease-in both;
    animation: jelly-answer 1s ease-in both
}

@-webkit-keyframes jelly-answer {
    0% {
        -webkit-transform: matrix3d(0.1, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.1, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    1.666667% {
        -webkit-transform: matrix3d(0.13823, 0, 0, 0, 0, 0.16209, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.13823, 0, 0, 0, 0, 0.16209, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    3.333333% {
        -webkit-transform: matrix3d(0.2909, 0, 0, 0, 0, 0.37203, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.2909, 0, 0, 0, 0, 0.37203, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    5% {
        -webkit-transform: matrix3d(0.44674, 0, 0, 0, 0, 0.59804, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.44674, 0, 0, 0, 0, 0.59804, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    6.666667% {
        -webkit-transform: matrix3d(0.59685, 0, 0, 0, 0, 0.81382, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.59685, 0, 0, 0, 0, 0.81382, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    8.333333% {
        -webkit-transform: matrix3d(0.73459, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.73459, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    10% {
        -webkit-transform: matrix3d(0.85548, 0, 0, 0, 0, 1.14452, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.85548, 0, 0, 0, 0, 1.14452, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    11.666667% {
        -webkit-transform: matrix3d(0.95693, 0, 0, 0, 0, 1.24218, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.95693, 0, 0, 0, 0, 1.24218, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    13.333333% {
        -webkit-transform: matrix3d(1.03794, 0, 0, 0, 0, 1.29368, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.03794, 0, 0, 0, 0, 1.29368, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    15% {
        -webkit-transform: matrix3d(1.09883, 0, 0, 0, 0, 1.30417, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.09883, 0, 0, 0, 0, 1.30417, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    16.666667% {
        -webkit-transform: matrix3d(1.14088, 0, 0, 0, 0, 1.28177, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.14088, 0, 0, 0, 0, 1.28177, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    18.333333% {
        -webkit-transform: matrix3d(1.16611, 0, 0, 0, 0, 1.2361, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.16611, 0, 0, 0, 0, 1.2361, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    20% {
        -webkit-transform: matrix3d(1.17694, 0, 0, 0, 0, 1.17694, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.17694, 0, 0, 0, 0, 1.17694, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    21.666667% {
        -webkit-transform: matrix3d(1.17603, 0, 0, 0, 0, 1.11326, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.17603, 0, 0, 0, 0, 1.11326, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    23.333333% {
        -webkit-transform: matrix3d(1.16606, 0, 0, 0, 0, 1.05246, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.16606, 0, 0, 0, 0, 1.05246, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    25% {
        -webkit-transform: matrix3d(1.14957, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.14957, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    26.666667% {
        -webkit-transform: matrix3d(1.12889, 0, 0, 0, 0, 0.95928, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.12889, 0, 0, 0, 0, 0.95928, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    28.333333% {
        -webkit-transform: matrix3d(1.10606, 0, 0, 0, 0, 0.93176, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.10606, 0, 0, 0, 0, 0.93176, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    30% {
        -webkit-transform: matrix3d(1.08275, 0, 0, 0, 0, 0.91725, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.08275, 0, 0, 0, 0, 0.91725, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    31.666667% {
        -webkit-transform: matrix3d(1.0603, 0, 0, 0, 0, 0.9143, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.0603, 0, 0, 0, 0, 0.9143, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    33.333333% {
        -webkit-transform: matrix3d(1.0397, 0, 0, 0, 0, 0.92061, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.0397, 0, 0, 0, 0, 0.92061, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    35% {
        -webkit-transform: matrix3d(1.02162, 0, 0, 0, 0, 0.93348, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.02162, 0, 0, 0, 0, 0.93348, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    36.666667% {
        -webkit-transform: matrix3d(1.00644, 0, 0, 0, 0, 0.95014, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00644, 0, 0, 0, 0, 0.95014, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    38.333333% {
        -webkit-transform: matrix3d(0.99432, 0, 0, 0, 0, 0.96809, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99432, 0, 0, 0, 0, 0.96809, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    40% {
        -webkit-transform: matrix3d(0.98522, 0, 0, 0, 0, 0.98522, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.98522, 0, 0, 0, 0, 0.98522, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    41.666667% {
        -webkit-transform: matrix3d(0.97893, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.97893, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    43.333333% {
        -webkit-transform: matrix3d(0.97516, 0, 0, 0, 0, 1.01147, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.97516, 0, 0, 0, 0, 1.01147, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    45% {
        -webkit-transform: matrix3d(0.97354, 0, 0, 0, 0, 1.01923, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.97354, 0, 0, 0, 0, 1.01923, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    46.666667% {
        -webkit-transform: matrix3d(0.97367, 0, 0, 0, 0, 1.02332, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.97367, 0, 0, 0, 0, 1.02332, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    48.333333% {
        -webkit-transform: matrix3d(0.97516, 0, 0, 0, 0, 1.02415, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.97516, 0, 0, 0, 0, 1.02415, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    50% {
        -webkit-transform: matrix3d(0.97763, 0, 0, 0, 0, 1.02237, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.97763, 0, 0, 0, 0, 1.02237, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    51.666667% {
        -webkit-transform: matrix3d(0.98072, 0, 0, 0, 0, 1.01874, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.98072, 0, 0, 0, 0, 1.01874, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    53.333333% {
        -webkit-transform: matrix3d(0.98414, 0, 0, 0, 0, 1.01405, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.98414, 0, 0, 0, 0, 1.01405, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    55% {
        -webkit-transform: matrix3d(0.98762, 0, 0, 0, 0, 1.00899, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.98762, 0, 0, 0, 0, 1.00899, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    56.666667% {
        -webkit-transform: matrix3d(0.99098, 0, 0, 0, 0, 1.00417, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99098, 0, 0, 0, 0, 1.00417, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    58.333333% {
        -webkit-transform: matrix3d(0.99406, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99406, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    60% {
        -webkit-transform: matrix3d(0.99677, 0, 0, 0, 0, 0.99677, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99677, 0, 0, 0, 0, 0.99677, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    61.666667% {
        -webkit-transform: matrix3d(0.99904, 0, 0, 0, 0, 0.99458, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99904, 0, 0, 0, 0, 0.99458, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    63.333333% {
        -webkit-transform: matrix3d(1.00085, 0, 0, 0, 0, 0.99343, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00085, 0, 0, 0, 0, 0.99343, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    65% {
        -webkit-transform: matrix3d(1.00221, 0, 0, 0, 0, 0.9932, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00221, 0, 0, 0, 0, 0.9932, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    66.666667% {
        -webkit-transform: matrix3d(1.00315, 0, 0, 0, 0, 0.9937, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00315, 0, 0, 0, 0, 0.9937, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    68.333333% {
        -webkit-transform: matrix3d(1.00372, 0, 0, 0, 0, 0.99472, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00372, 0, 0, 0, 0, 0.99472, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    70% {
        -webkit-transform: matrix3d(1.00396, 0, 0, 0, 0, 0.99604, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00396, 0, 0, 0, 0, 0.99604, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    71.666667% {
        -webkit-transform: matrix3d(1.00394, 0, 0, 0, 0, 0.99747, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00394, 0, 0, 0, 0, 0.99747, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    73.333333% {
        -webkit-transform: matrix3d(1.00371, 0, 0, 0, 0, 0.99883, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00371, 0, 0, 0, 0, 0.99883, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    75% {
        -webkit-transform: matrix3d(1.00335, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00335, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    76.666667% {
        -webkit-transform: matrix3d(1.00288, 0, 0, 0, 0, 1.00091, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00288, 0, 0, 0, 0, 1.00091, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    78.333333% {
        -webkit-transform: matrix3d(1.00237, 0, 0, 0, 0, 1.00153, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00237, 0, 0, 0, 0, 1.00153, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    80% {
        -webkit-transform: matrix3d(1.00185, 0, 0, 0, 0, 1.00185, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00185, 0, 0, 0, 0, 1.00185, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    81.666667% {
        -webkit-transform: matrix3d(1.00135, 0, 0, 0, 0, 1.00192, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00135, 0, 0, 0, 0, 1.00192, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    83.333333% {
        -webkit-transform: matrix3d(1.00089, 0, 0, 0, 0, 1.00178, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00089, 0, 0, 0, 0, 1.00178, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    85% {
        -webkit-transform: matrix3d(1.00048, 0, 0, 0, 0, 1.00149, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00048, 0, 0, 0, 0, 1.00149, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    86.666667% {
        -webkit-transform: matrix3d(1.00014, 0, 0, 0, 0, 1.00112, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00014, 0, 0, 0, 0, 1.00112, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    88.333333% {
        -webkit-transform: matrix3d(0.99987, 0, 0, 0, 0, 1.00071, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99987, 0, 0, 0, 0, 1.00071, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    90% {
        -webkit-transform: matrix3d(0.99967, 0, 0, 0, 0, 1.00033, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99967, 0, 0, 0, 0, 1.00033, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    91.666667% {
        -webkit-transform: matrix3d(0.99953, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99953, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    93.333333% {
        -webkit-transform: matrix3d(0.99944, 0, 0, 0, 0, 0.99974, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99944, 0, 0, 0, 0, 0.99974, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    95% {
        -webkit-transform: matrix3d(0.99941, 0, 0, 0, 0, 0.99957, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99941, 0, 0, 0, 0, 0.99957, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    96.666667% {
        -webkit-transform: matrix3d(0.99941, 0, 0, 0, 0, 0.99948, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99941, 0, 0, 0, 0, 0.99948, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    98.333333% {
        -webkit-transform: matrix3d(0.99944, 0, 0, 0, 0, 0.99946, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99944, 0, 0, 0, 0, 0.99946, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    100% {
        -webkit-transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
}

@keyframes jelly-answer {
    0% {
        -webkit-transform: matrix3d(0.1, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.1, 0, 0, 0, 0, 0.1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    1.666667% {
        -webkit-transform: matrix3d(0.13823, 0, 0, 0, 0, 0.16209, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.13823, 0, 0, 0, 0, 0.16209, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    3.333333% {
        -webkit-transform: matrix3d(0.2909, 0, 0, 0, 0, 0.37203, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.2909, 0, 0, 0, 0, 0.37203, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    5% {
        -webkit-transform: matrix3d(0.44674, 0, 0, 0, 0, 0.59804, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.44674, 0, 0, 0, 0, 0.59804, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    6.666667% {
        -webkit-transform: matrix3d(0.59685, 0, 0, 0, 0, 0.81382, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.59685, 0, 0, 0, 0, 0.81382, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    8.333333% {
        -webkit-transform: matrix3d(0.73459, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.73459, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    10% {
        -webkit-transform: matrix3d(0.85548, 0, 0, 0, 0, 1.14452, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.85548, 0, 0, 0, 0, 1.14452, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    11.666667% {
        -webkit-transform: matrix3d(0.95693, 0, 0, 0, 0, 1.24218, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.95693, 0, 0, 0, 0, 1.24218, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    13.333333% {
        -webkit-transform: matrix3d(1.03794, 0, 0, 0, 0, 1.29368, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.03794, 0, 0, 0, 0, 1.29368, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    15% {
        -webkit-transform: matrix3d(1.09883, 0, 0, 0, 0, 1.30417, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.09883, 0, 0, 0, 0, 1.30417, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    16.666667% {
        -webkit-transform: matrix3d(1.14088, 0, 0, 0, 0, 1.28177, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.14088, 0, 0, 0, 0, 1.28177, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    18.333333% {
        -webkit-transform: matrix3d(1.16611, 0, 0, 0, 0, 1.2361, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.16611, 0, 0, 0, 0, 1.2361, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    20% {
        -webkit-transform: matrix3d(1.17694, 0, 0, 0, 0, 1.17694, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.17694, 0, 0, 0, 0, 1.17694, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    21.666667% {
        -webkit-transform: matrix3d(1.17603, 0, 0, 0, 0, 1.11326, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.17603, 0, 0, 0, 0, 1.11326, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    23.333333% {
        -webkit-transform: matrix3d(1.16606, 0, 0, 0, 0, 1.05246, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.16606, 0, 0, 0, 0, 1.05246, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    25% {
        -webkit-transform: matrix3d(1.14957, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.14957, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    26.666667% {
        -webkit-transform: matrix3d(1.12889, 0, 0, 0, 0, 0.95928, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.12889, 0, 0, 0, 0, 0.95928, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    28.333333% {
        -webkit-transform: matrix3d(1.10606, 0, 0, 0, 0, 0.93176, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.10606, 0, 0, 0, 0, 0.93176, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    30% {
        -webkit-transform: matrix3d(1.08275, 0, 0, 0, 0, 0.91725, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.08275, 0, 0, 0, 0, 0.91725, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    31.666667% {
        -webkit-transform: matrix3d(1.0603, 0, 0, 0, 0, 0.9143, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.0603, 0, 0, 0, 0, 0.9143, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    33.333333% {
        -webkit-transform: matrix3d(1.0397, 0, 0, 0, 0, 0.92061, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.0397, 0, 0, 0, 0, 0.92061, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    35% {
        -webkit-transform: matrix3d(1.02162, 0, 0, 0, 0, 0.93348, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.02162, 0, 0, 0, 0, 0.93348, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    36.666667% {
        -webkit-transform: matrix3d(1.00644, 0, 0, 0, 0, 0.95014, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00644, 0, 0, 0, 0, 0.95014, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    38.333333% {
        -webkit-transform: matrix3d(0.99432, 0, 0, 0, 0, 0.96809, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99432, 0, 0, 0, 0, 0.96809, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    40% {
        -webkit-transform: matrix3d(0.98522, 0, 0, 0, 0, 0.98522, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.98522, 0, 0, 0, 0, 0.98522, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    41.666667% {
        -webkit-transform: matrix3d(0.97893, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.97893, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    43.333333% {
        -webkit-transform: matrix3d(0.97516, 0, 0, 0, 0, 1.01147, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.97516, 0, 0, 0, 0, 1.01147, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    45% {
        -webkit-transform: matrix3d(0.97354, 0, 0, 0, 0, 1.01923, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.97354, 0, 0, 0, 0, 1.01923, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    46.666667% {
        -webkit-transform: matrix3d(0.97367, 0, 0, 0, 0, 1.02332, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.97367, 0, 0, 0, 0, 1.02332, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    48.333333% {
        -webkit-transform: matrix3d(0.97516, 0, 0, 0, 0, 1.02415, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.97516, 0, 0, 0, 0, 1.02415, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    50% {
        -webkit-transform: matrix3d(0.97763, 0, 0, 0, 0, 1.02237, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.97763, 0, 0, 0, 0, 1.02237, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    51.666667% {
        -webkit-transform: matrix3d(0.98072, 0, 0, 0, 0, 1.01874, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.98072, 0, 0, 0, 0, 1.01874, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    53.333333% {
        -webkit-transform: matrix3d(0.98414, 0, 0, 0, 0, 1.01405, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.98414, 0, 0, 0, 0, 1.01405, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    55% {
        -webkit-transform: matrix3d(0.98762, 0, 0, 0, 0, 1.00899, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.98762, 0, 0, 0, 0, 1.00899, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    56.666667% {
        -webkit-transform: matrix3d(0.99098, 0, 0, 0, 0, 1.00417, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99098, 0, 0, 0, 0, 1.00417, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    58.333333% {
        -webkit-transform: matrix3d(0.99406, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99406, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    60% {
        -webkit-transform: matrix3d(0.99677, 0, 0, 0, 0, 0.99677, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99677, 0, 0, 0, 0, 0.99677, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    61.666667% {
        -webkit-transform: matrix3d(0.99904, 0, 0, 0, 0, 0.99458, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99904, 0, 0, 0, 0, 0.99458, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    63.333333% {
        -webkit-transform: matrix3d(1.00085, 0, 0, 0, 0, 0.99343, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00085, 0, 0, 0, 0, 0.99343, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    65% {
        -webkit-transform: matrix3d(1.00221, 0, 0, 0, 0, 0.9932, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00221, 0, 0, 0, 0, 0.9932, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    66.666667% {
        -webkit-transform: matrix3d(1.00315, 0, 0, 0, 0, 0.9937, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00315, 0, 0, 0, 0, 0.9937, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    68.333333% {
        -webkit-transform: matrix3d(1.00372, 0, 0, 0, 0, 0.99472, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00372, 0, 0, 0, 0, 0.99472, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    70% {
        -webkit-transform: matrix3d(1.00396, 0, 0, 0, 0, 0.99604, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00396, 0, 0, 0, 0, 0.99604, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    71.666667% {
        -webkit-transform: matrix3d(1.00394, 0, 0, 0, 0, 0.99747, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00394, 0, 0, 0, 0, 0.99747, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    73.333333% {
        -webkit-transform: matrix3d(1.00371, 0, 0, 0, 0, 0.99883, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00371, 0, 0, 0, 0, 0.99883, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    75% {
        -webkit-transform: matrix3d(1.00335, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00335, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    76.666667% {
        -webkit-transform: matrix3d(1.00288, 0, 0, 0, 0, 1.00091, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00288, 0, 0, 0, 0, 1.00091, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    78.333333% {
        -webkit-transform: matrix3d(1.00237, 0, 0, 0, 0, 1.00153, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00237, 0, 0, 0, 0, 1.00153, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    80% {
        -webkit-transform: matrix3d(1.00185, 0, 0, 0, 0, 1.00185, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00185, 0, 0, 0, 0, 1.00185, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    81.666667% {
        -webkit-transform: matrix3d(1.00135, 0, 0, 0, 0, 1.00192, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00135, 0, 0, 0, 0, 1.00192, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    83.333333% {
        -webkit-transform: matrix3d(1.00089, 0, 0, 0, 0, 1.00178, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00089, 0, 0, 0, 0, 1.00178, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    85% {
        -webkit-transform: matrix3d(1.00048, 0, 0, 0, 0, 1.00149, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00048, 0, 0, 0, 0, 1.00149, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    86.666667% {
        -webkit-transform: matrix3d(1.00014, 0, 0, 0, 0, 1.00112, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1.00014, 0, 0, 0, 0, 1.00112, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    88.333333% {
        -webkit-transform: matrix3d(0.99987, 0, 0, 0, 0, 1.00071, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99987, 0, 0, 0, 0, 1.00071, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    90% {
        -webkit-transform: matrix3d(0.99967, 0, 0, 0, 0, 1.00033, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99967, 0, 0, 0, 0, 1.00033, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    91.666667% {
        -webkit-transform: matrix3d(0.99953, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99953, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    93.333333% {
        -webkit-transform: matrix3d(0.99944, 0, 0, 0, 0, 0.99974, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99944, 0, 0, 0, 0, 0.99974, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    95% {
        -webkit-transform: matrix3d(0.99941, 0, 0, 0, 0, 0.99957, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99941, 0, 0, 0, 0, 0.99957, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    96.666667% {
        -webkit-transform: matrix3d(0.99941, 0, 0, 0, 0, 0.99948, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99941, 0, 0, 0, 0, 0.99948, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    98.333333% {
        -webkit-transform: matrix3d(0.99944, 0, 0, 0, 0, 0.99946, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(0.99944, 0, 0, 0, 0, 0.99946, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
    100% {
        -webkit-transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        transform: matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>postaljs - 前端组件化框架的救星</title>
      <link>http://localhost:8080/articles/20160223-postal-js/</link>
      <pubDate>Tue, 23 Feb 2016 08:00:00 +0800</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/20160223-postal-js/</guid>
      <author></author>
      <description>&lt;p&gt;Postaljs是一款js pub/sub 库，相当于为页面应用提供了一个新的事件/消息系统。 作为原始JS开发，貌似对这种事件系统需求不大，然而要使用组件化开发，无论是reactjs还是angular，这种事件系统都会起到很大的作用。   &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/20160223-postal-js/preview.png&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;why-postaljs&quot;&gt;Why PostalJS&lt;/h2&gt;
&lt;p&gt;其实，我开发js这么多年，一直也没有感觉有一个事件系统或者消息系统的需要。 主要原因还是在整个DOM页面中，要调用谁或者发送消息，直接 $ 一下就好了，当然也和应用性质相关。 
最近使用Reactjs开发， 页面组件化倒是实现了，但有个关键问题就是组件间通讯。&lt;/p&gt;
&lt;p&gt;我们知道reactjs组件是以一个树状形式组织的，作为UI组件化，相信这样的结构是有道理的，我们的DOM本身也是一个树状结构。 然而组件之间的调用只能有2个方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;父调用子，使用refs&lt;/li&gt;
&lt;li&gt;子调用父，使用props&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;很多时候，如果2个组件间不是这样的关系，就只能一个组件逐层往上调用，直到一个共同的祖先，在顺次调用下去。这样是非常不合理的，我想跨越层次结构调用的需求是必然存在的。&lt;/p&gt;
&lt;p&gt;特别的，在层次关系结构中，子调用父本身就是个很别扭的事情，就react而言，其实是应该是增加一个callback属性，专门用于子级元素的回调。&lt;/p&gt;
&lt;p&gt;另外，我们也可以才用一个方法是将所有组件扁平化，虽然解决了逐层调用的尴尬问题，但也造成组件和ui原始特性的不匹配，有可能造成更大的不合理。 &lt;/p&gt;
&lt;p&gt;在react官方，也给出的解决方案就是建议使用一个消息系统。 &lt;a href=&quot;https://github.com/postaljs/postal.js&quot;&gt;PostalJS&lt;/a&gt; 就是一个很好的选择。&lt;/p&gt;
&lt;p&gt;Postal是一个典型的事件订阅框架。 这也是我们学计算机一个经典模型，它在DOM模型中事件的逐层传递特性(event bubble)之外，增加了一个事件模型。&lt;/p&gt;
&lt;p&gt;这个事件模型其实是我们计算机的一个经典模型就是生产者/消费者模式： 在postal中：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义多个通道(channel)，生产者将消息(topic)发步(publish)到通道中，消息还可以携带数据。&lt;/li&gt;
&lt;li&gt;消费者订阅(subscribe)一个通道的某种消息，进而进行后续处理&lt;/li&gt;
&lt;li&gt;publish方和subscribe方是多对多的关系。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;-&quot;&gt;安装&lt;/h2&gt;
&lt;h3 id=&quot;-&quot;&gt;普通安装&lt;/h3&gt;
&lt;p&gt;引入 postal.lodash.min.js 即可 &lt;/p&gt;
&lt;h3 id=&quot;npm-&quot;&gt;npm安装&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install postal –save-dev&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在js中&lt;/p&gt;
&lt;p&gt;   var postal = require(“postal”);&lt;/p&gt;
&lt;p&gt;然后就可以正常 订阅/发布 消息了&lt;/p&gt;
&lt;h4 id=&quot;-&quot;&gt;发布消息&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;  postal.publish({
      channel: &amp;quot;orders&amp;quot;,
      topic: &amp;quot;item.add&amp;quot;,
      data: {
          sku: &amp;quot;AZDTF4346&amp;quot;,
          qty: 21
      }
  });
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;-&quot;&gt;订阅消息&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;var subscription = postal.subscribe({
       channel: &amp;quot;orders&amp;quot;,
       topic: &amp;quot;item.add&amp;quot;,
       callback: function(data, envelope) {
           // `data` is the data published by the publisher.
           // `envelope` is a wrapper around the data &amp;amp; contains
           // metadata about the message like the channel, topic,
           // timestamp and any other data which might have been
           // added by the sender.
       }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;-&quot;&gt;结论&lt;/h2&gt;
&lt;p&gt;不光用于react，在我们js开发中，有类似需求的场景都可以采用postal来进行处理。 &lt;/p&gt;
</description>
    </item>
    <item>
      <title>A study game - Listen and choose</title>
      <link>http://localhost:8080/articles/20160215-listen-n-choose/</link>
      <pubDate>Mon, 15 Feb 2016 08:00:00 +0800</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/20160215-listen-n-choose/</guid>
      <author></author>
      <description>&lt;p&gt;The game for kids  is made with cocos2d-js(html5) in this time last year. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/20160215-listen-n-choose/preview.png&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;a-kick-start-of-cocos-js-pure-html5-&quot;&gt;A kick start of cocos-js (pure html5)&lt;/h2&gt;
&lt;h3 id=&quot;1-prepare-the-html&quot;&gt;1. Prepare the html&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;body style=&amp;quot;padding:0; margin: 0; background: #000;&amp;quot;&amp;gt;
    &amp;lt;canvas id=&amp;quot;gameCanvas&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;cocos2d-js-v3.10.js&amp;quot; charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-a-file-with-name-project-json-like-this&quot;&gt;2. A file with name project.json like this&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;project_type&amp;quot;: &amp;quot;javascript&amp;quot;,
  &amp;quot;debugMode&amp;quot;: 0,
  &amp;quot;showFPS&amp;quot;: true,
  &amp;quot;frameRate&amp;quot;: 60,
  &amp;quot;id&amp;quot;: &amp;quot;gameCanvas&amp;quot;,
  &amp;quot;renderMode&amp;quot;: 0,
  &amp;quot;modules&amp;quot;: [
    &amp;quot;cocos2d&amp;quot;,
    &amp;quot;extensions&amp;quot;,
    &amp;quot;external&amp;quot;
  ],
  &amp;quot;jsList&amp;quot;: [
    &amp;quot;src/GameScene.js&amp;quot;,
    &amp;quot;src/app.js&amp;quot;,
    &amp;quot;src/resource.js&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; In this file, the jsList is the game js files to include. And the other configuration is the same as cocos2d-x&lt;/p&gt;
&lt;h3 id=&quot;3-write-your-js-and-include-resources-enjoy-&quot;&gt;3. Write your js and include resources, Enjoy~!&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;window.onload = function(){
    cc.game.onStart = function(){
        cc.view.adjustViewPort(true);
        cc.view.setDesignResolutionSize(1024, 768, cc.ResolutionPolicy.SHOW_ALL);
        cc.view.resizeWithBrowserSize(true);
        //load resources
        cc.LoaderScene.preload(g_resources, function () {
            cc.director.runScene(new PopoScene());
        }, this);
    };
    cc.game.run();
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The main difference between cocos2d-html and cocos2d-native is the cocos2d single javascript source file。 &lt;/p&gt;
</description>
    </item>
    <item>
      <title>Re-Make of Dido Timer</title>
      <link>http://localhost:8080/articles/20160202-didotimer-remake/</link>
      <pubDate>Tue, 02 Feb 2016 08:00:00 +0800</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/20160202-didotimer-remake/</guid>
      <author></author>
      <description>&lt;p&gt;This is the dido-timer, which is first published as mobile app in cordova in the end of 2014. And now it can be run on browsers with mobile shell. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/20160202-didotimer-remake/preview.png&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>The animate.table alpha preview</title>
      <link>http://localhost:8080/articles/20160120-previewof-animatetable/</link>
      <pubDate>Sat, 16 Jan 2016 08:00:00 +0800</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/20160120-previewof-animatetable/</guid>
      <author></author>
      <description>&lt;p&gt;animate.table is a jquery plugin(would be react component and npm package in future) which can initialize a html table by json data with animations. animate.table is also a dynamic table. you can also insert\remove\update table or rows with animation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/20160120-previewof-animatetable/preview.png&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;what-is-animate-table&quot;&gt;What is animate.table&lt;/h2&gt;
&lt;p&gt;animate.table is a jquery plugin(would be react component and npm package in future) which can initialize a html table by json data with animations. animate.table is also a dynamic table. you can also insert\remove\update table or rows with animation.&lt;/p&gt;
&lt;p&gt;Find more at &lt;a href=&quot;http://liuhann.github.io/animate.table/index.html&quot;&gt;http://liuhann.github.io/animate.table/index.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;start-up&quot;&gt;Start up&lt;/h2&gt;
&lt;p&gt;include your js at the head&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;js/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;js/underscore-min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;js/animate.table.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And then prepare your data and the div to draw it !&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;mytable&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and then initialize table with data    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
    $(&amp;quot;#yourtable&amp;quot;).animatedTable().data(rowsData);    
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>The device shell for device preview</title>
      <link>http://localhost:8080/articles/20160111-device-shell/</link>
      <pubDate>Mon, 11 Jan 2016 08:00:00 +0800</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/20160111-device-shell/</guid>
      <author></author>
      <description>&lt;p&gt;DeviceShell is a jquery plugin to provide device shell for any div in a laptop html pages.  If your visit the page on mobile or pad, the content is auto set as full screened. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/20160111-device-shell/preview.png&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;basic-usage&quot;&gt;Basic Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;js/jquery-2.1.0.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;js/deviceshell.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

$(&amp;quot;#ipad&amp;quot;).deviceshell({
    width: 800,
    type: &amp;#39;ipad&amp;#39;
});

$(&amp;quot;#iphone&amp;quot;).deviceshell({
    width: 260
});
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;preview&quot;&gt;Preview&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://localhost:8080/mockdevice/iphone.html&quot;&gt;Device Shell Preview &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/liuhann/shell&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>My handy codes</title>
      <link>http://localhost:8080/articles/00-handy-codes/</link>
      <pubDate>Tue, 15 Dec 2015 08:00:00 +0800</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/00-handy-codes/</guid>
      <author></author>
      <description>&lt;p&gt;Quick code reference&lt;/p&gt;
&lt;p&gt;Front code collections for quickly input&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/00-handy-codes/preview.png&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;callback-when-animation-ends&quot;&gt;Callback when animation ends&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;var ANI_EVENT_NAME = &amp;#39;webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend&amp;#39;;
$(ele).on(ANI_EVENT_NAME,
    function(){
        $(this).off(ANI_EVENT_NAME);
    }
);
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>一些关于Javascript有趣的问题</title>
      <link>http://localhost:8080/articles/20160222-js-questions/</link>
      <pubDate>Sun, 15 Nov 2015 08:00:00 +0800</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/20160222-js-questions/</guid>
      <author></author>
      <description>&lt;p&gt;本文介绍了一些js试题。无论有趣或者无趣，这就是我们大前端正在使用着的语言。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/20160222-js-questions/preview.png&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;-1&quot;&gt;问题1&lt;/h2&gt;
&lt;h3 id=&quot;-&quot;&gt;以下代码输出什么?&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt; var y = 1;
  if (function f(){}) {
    y += typeof f;
  }
  console.log(y);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;好吧，很有迷惑性，输出为1undefined。 为何有此输出呢？ 再看下面的代码输出也是同样:  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt; var k = 1;
  if (1) {
    eval(function foo(){});
    k += typeof foo;
  }
  console.log(k); 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;关键点是， if 语句内部的判断执行scope同eval。 所以function foo() 并没有加入当前scope，所以 1+undefined = 1undefined.
下面这个就输出为 1function 了(多么奇怪的输出啊！)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var k = 1;
if (1) {
    function foo(){};
    k += typeof foo;
}
console.log(k); // output 1function
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;-2&quot;&gt;问题2&lt;/h2&gt;
&lt;h3 id=&quot;private-&quot;&gt;private 方法有什么缺点？&lt;/h3&gt;
&lt;p&gt;显然，缺点就是太消耗内存。看这个例子&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var Employee = function (name, company, salary) {
    this.name = name || &amp;quot;&amp;quot;;       //Public attribute default value is null
    this.company = company || &amp;quot;&amp;quot;; //Public attribute default value is null
    this.salary = salary || 5000; //Public attribute default value is null

    // Private method
    var increaseSalary = function () {
        this.salary = this.salary + 1000;
    };

    // Public method
    this.dispalyIncreasedSalary = function() {
        increaseSlary();
        console.log(this.salary);
    };
};

// Create Employee class object
var emp1 = new Employee(&amp;quot;John&amp;quot;,&amp;quot;Pluto&amp;quot;,3000);
// Create Employee class object
var emp2 = new Employee(&amp;quot;Merry&amp;quot;,&amp;quot;Pluto&amp;quot;,2000);
// Create Employee class object
var emp3 = new Employee(&amp;quot;Ren&amp;quot;,&amp;quot;Pluto&amp;quot;,2500);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;每个new的Employee 都有一个方法increaseSalary。 而这个方法是完全相同的。&lt;/p&gt;
&lt;h2 id=&quot;-3&quot;&gt;问题3&lt;/h2&gt;
&lt;h3 id=&quot;-mul-2-3-4-2-3-4&quot;&gt;实现一个方法 mul(2)(3)(4) = 2&lt;em&gt;3&lt;/em&gt;4&lt;/h3&gt;
&lt;p&gt;蛋疼么？ 实现如下 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function mul (x) {
    return function (y) { // anonymous function 
        return function (z) { // anonymous function 
            return x * y * z; 
        };
    };
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;好吧，定义这个函数后，再调用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mul(2)
mul(2)(3)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看看返回什么吧。好吧，已碎。&lt;/p&gt;
&lt;h2 id=&quot;-4&quot;&gt;问题4&lt;/h2&gt;
&lt;h3 id=&quot;-var-arraylist-a-b-c-d-e-f-&quot;&gt;如何清空一个数组 例如  var arrayList =  [‘a’,’b’,’c’,’d’,’e’,’f’];&lt;/h3&gt;
&lt;p&gt;这个问题还有点意思。因为我经常碰到，而且做法如下 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;arrayList = []
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;虽然实用，但是有个问题就是如果这个arrayList被赋予过其他变量时，那个变量是不会改变的。 在angularjs中，如果绑定的数据是这个就不能这么清除了。&lt;/p&gt;
&lt;p&gt;第2个实现是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;arrayList.length = 0;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第3个是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;arrayList.splice(0, arrayList.length);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;好吧 splice都用上了， 牛人啊，最后一个是 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;while(arrayList.length){
    arrayList.pop();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是最弱的方法。 其实，当第一个无法清除引用时我就这么干的。 这个方法不推荐&lt;/p&gt;
&lt;h2 id=&quot;-5&quot;&gt;问题5&lt;/h2&gt;
&lt;h3 id=&quot;-&quot;&gt;以下代码输出什么？&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;var output = (function(x){
    delete x;
    return x;
})(0);

console.log(output);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;说输出undefined的 那可错了。输出为0， 因为delete操作符删除对象的属性。它不能直接删除对象。&lt;/p&gt;
&lt;p&gt;一定会有人为那么怎么能删除x呢？看来这边文章你也学会蛋疼了， 那就是貌似无法删除。 好吧为了进一步了解情况。试试这2段代码或许有所启发吧&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = 1;
delete x;
console.log(x)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出为  x is not defined &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var x = 1;
delete x;
console.log(x)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出为 1 &lt;/p&gt;
&lt;h2 id=&quot;-6&quot;&gt;问题6&lt;/h2&gt;
&lt;h3 id=&quot;-&quot;&gt;以下代码输出什么&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;var trees = [&amp;quot;xyz&amp;quot;,&amp;quot;xxxx&amp;quot;,&amp;quot;test&amp;quot;,&amp;quot;ryan&amp;quot;,&amp;quot;apple&amp;quot;];
delete trees[3];
console.log(trees.length);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;返回为5. delete操作符可以删除数组成员， 但其效果基本等同于   trees[3] = null; &lt;/p&gt;
&lt;h2 id=&quot;-7&quot;&gt;问题7&lt;/h2&gt;
&lt;h3 id=&quot;-&quot;&gt;以下代码输出为什么？&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;var bar = true;
console.log(bar + 0);   
console.log(bar + &amp;quot;xyz&amp;quot;);  
console.log(bar + true);  
console.log(bar + false);   
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;答案是 1, “truexyz”, 2, 1. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Number + Number -&amp;gt; 加法
Boolean + Number -&amp;gt; 加法
Boolean + Number -&amp;gt; 加法
Number + String -&amp;gt; 连接
String + Boolean -&amp;gt; 连接
String + String -&amp;gt; 连接
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以请不要记住这些，忘掉它们把。 2个不同类型相加，受够了&lt;/p&gt;
&lt;h2 id=&quot;-8&quot;&gt;问题8&lt;/h2&gt;
&lt;h3 id=&quot;-2-&quot;&gt;以下这2种定义方法有何不同？&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;var foo = function(){ 
    // Some code
};

function bar(){ 
    // Some code
}; 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;傻眼了吧， 其实区别在于前者为运行时解析，后者为解析时执行。大家可能没太关注这2个概念，但是一个页面的js的确是全部解析完才运行的。 
试着执行这2段(当然不执行相信您也明白了)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;foo(); 
var foo = function(){ 
        console.log(&amp;quot;Hi I am inside Foo&amp;quot;);
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;还有 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bar(); 
function bar(){ 
    console.log(&amp;quot;Hi I am inside Foo&amp;quot;);
}; 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其实这个运行期解析期是个雷区，我们轻易不碰的。所以以上区别在这种情况下还有有用的，就是按条件定义函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if(testCondition) {// If testCondition is true then 
     var foo = function(){ 
        console.log(&amp;quot;inside Foo with testCondition True value&amp;quot;);
     }; 
 }else{
      var foo = function(){ 
        console.log(&amp;quot;inside Foo with testCondition false value&amp;quot;);
     }; 
 }
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;-9&quot;&gt;问题9&lt;/h2&gt;
&lt;h3 id=&quot;-hoisting-&quot;&gt;什么是函数提升? (hoisting)&lt;/h3&gt;
&lt;p&gt;好吧这是个经典问题。 &lt;/p&gt;
&lt;p&gt;在js中，函数和变量都是首先被置于所有执行代码前执行。 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt; foo(); // Here foo is still undefined 
 var foo = function foo(){ 
     return 12; 
 };
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其执行次序为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var foo = undefined;
foo(); 
foo = function foo(){ } 
var foo = undefined;
foo = function foo(){ } 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另外看一下这个代码 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var salary = &amp;quot;1000$&amp;quot;;

 (function () {
     console.log(&amp;quot;Original salary was &amp;quot; + salary);

     var salary = &amp;quot;5000$&amp;quot;;

     console.log(&amp;quot;My New Salary &amp;quot; + salary);
 })();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果就是 undefined, 5000$. 原因是 var 被提升，代码等同于 
  var salary = “1000$”;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  (function () {
      var salary = undefined;
      console.log(&amp;quot;Original salary was &amp;quot; + salary);

      salary = &amp;quot;5000$&amp;quot;;

      console.log(&amp;quot;My New Salary &amp;quot; + salary);
  })();
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;-10&quot;&gt;问题10&lt;/h2&gt;
&lt;p&gt;###下面代码输出是什么? &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(function(){
  var a = b = 3;
})();
console.log(b);
console.log(a);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;好吧，输出为3 然后报错。 这要是选择题就好了， 因为大家要注意我把b放在前面了。 &lt;/p&gt;
&lt;p&gt;var a = b = 3; 等同于  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;b = 3; 
var a = b; 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而不是  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var b = 3;
var a = b;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;虽然2个变量在闭包中定义， b还是泄露出来了， 因为不带var的定义都是视为window属性，定义在全局。 所以以后不要这么干了 &lt;/p&gt;
&lt;h2 id=&quot;-11&quot;&gt;问题11&lt;/h2&gt;
&lt;h2 id=&quot;-2-&quot;&gt;调用以下2个函数返回相同么？&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;function foo1() {
  return {
      bar: &amp;quot;hello&amp;quot;
  };
}

function foo2() {
  return
  {
      bar: &amp;quot;hello&amp;quot;
  };
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;首先要看出来这2个有什么区别就赢了。 当return 后面什么都不跟时，会被解析为立即增加一个分号 &lt;/p&gt;
&lt;p&gt;foo2等同于&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return;
{
  bar: &amp;quot;hello&amp;quot;
};
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;-12&quot;&gt;问题12&lt;/h2&gt;
&lt;h2 id=&quot;nan-typeof-nan-number-&quot;&gt;NaN是什么含义，  typeof NaN === “number” 返回什么？&lt;/h2&gt;
&lt;p&gt;答： NaN表示不是一个数字 (Not a Number).并且它的类型为number。 以上判断返回true。并且以下输出为false &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(NaN === NaN);  //返回false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;哎，自己都不等于自己了。迷茫啊~~&lt;/p&gt;
&lt;h2 id=&quot;-13&quot;&gt;问题13&lt;/h2&gt;
&lt;h2 id=&quot;-integer&quot;&gt;如何判断一个变量是integer&lt;/h2&gt;
&lt;p&gt;在ECMAscript 6 提供了一个方法 Number.isInteger()进行判断， 然而ES6之前，是没有这个方法的。&lt;/p&gt;
&lt;p&gt;在ECMAscript中，integer只是在使用中存在，但是存储时所有number都以float形式存储。&lt;/p&gt;
&lt;p&gt;最好的实现为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function isInteger(x) { return (x^0) === x; } 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个实现， x为非整数、字符串甚至null时都能正常工作。另外这个方法也可以&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function isInteger(x) { return Math.round(x) === x; }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function isInteger(x) { return (typeof x === &amp;#39;number&amp;#39;) &amp;amp;&amp;amp; (x % 1 === 0); }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我只能说，一个简单的功能竟然有这么五花八门的实现。 服了~&lt;/p&gt;
&lt;h2 id=&quot;-14&quot;&gt;问题14&lt;/h2&gt;
&lt;h2 id=&quot;-1234&quot;&gt;为什么下面代码输出不是1234&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;console.log(1); 
setTimeout(function(){console.log(4)}, 1000); 
setTimeout(function(){console.log(2)}, 0); 
console.log(3);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1和4的次序比较肯定，但是2在setTimeout之中，延时为0。为什么反而在3之后执行呢？&lt;/p&gt;
&lt;p&gt;有个关键问题就是浏览器是单线程执行的。关于 &lt;a href=&quot;http://javascript.info/tutorial/events-and-timing-depth&quot;&gt;Javascript Event and Timing&lt;/a&gt;
简单来讲，就是任何事件、定时任务都要等浏览器空闲了才会被执行。 那么setTimeout增加了一个任务，必须要等当前代码全部执行完成。 &lt;/p&gt;
&lt;h2 id=&quot;-15&quot;&gt;问题15&lt;/h2&gt;
&lt;h3 id=&quot;-&quot;&gt;以下代码输出为？&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;var hero = {
    _name: &amp;#39;John Doe&amp;#39;,
    getSecretIdentity: function (){
        return this._name;
    }
};

var stoleSecretIdentity = hero.getSecretIdentity;

console.log(stoleSecretIdentity());
console.log(hero.getSecretIdentity());
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;又是一道送分题啊，从题目就能看出了，知识点是this的含义：表示函数的调用方。  第一个调用方是global，第二个是hero。
所以答案是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;undefined
John Doe
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了解决第一个调用的问题，更改为 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var stoleSecretIdentity = hero.getSecretIdentity.bind(hero);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是必考的送分题，同学们要记住啊！ &lt;/p&gt;
&lt;h2 id=&quot;-16&quot;&gt;问题16&lt;/h2&gt;
&lt;h3 id=&quot;-&quot;&gt;以下代码输出为？&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;var a={},
    b={key:&amp;#39;b&amp;#39;},
    c={key:&amp;#39;c&amp;#39;};

a[b]=123;
a[c]=456;

console.log(a[b]);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有点糊涂吧， 答案是 456 . 大家可能看出来了， b是一个对象，却作为对象a的属性key来设置。 这在实际场景中是不会出现的，除非是出现bug写法，但是js的确允许这样，
将b设置为key时进行stringify处理。&lt;/p&gt;
&lt;p&gt;所以&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a[&amp;quot;[object Object]&amp;quot;] = 123;
a[&amp;quot;[object Object]&amp;quot;] = 456;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>The eliyou red package</title>
      <link>http://localhost:8080/articles/20151102-eliyou-redpackage/</link>
      <pubDate>Fri, 06 Nov 2015 08:00:00 +0800</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/20151102-eliyou-redpackage/</guid>
      <author></author>
      <description>&lt;p&gt;The loading work is written separately, So we can add a lightweight scene director for that&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/20151102-eliyou-redpackage/preview.png&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://localhost:8080/elilyou/index.html&quot;&gt;Eliyou Red Package&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Honeycomb slide show maker</title>
      <link>http://localhost:8080/articles/20151020-honey-maker/</link>
      <pubDate>Tue, 20 Oct 2015 08:00:00 +0800</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/20151020-honey-maker/</guid>
      <author></author>
      <description>&lt;p&gt;The  whiteboard screen and the landscape requires a slide show of honeycombs, and here is the ultimate maker! &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/20151020-honey-maker/preview.png&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;what-can-i-do-&quot;&gt;What can I do?&lt;/h2&gt;
&lt;p&gt;The maker can paint out the Hexagonal grids which are NOT quite as straightforward or common as square grids. &lt;a href=&quot;http://www.redblobgames.com/grids/hexagons/&quot;&gt;hexagons&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can make your hexagonal shows with this layout,and what’s more, setting the background image, writing the title and the description and the entrance animation. &lt;/p&gt;
&lt;p&gt;So take a look at this and enjoy&lt;/p&gt;
&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://localhost:8080/honeymaker/maker.html&quot;&gt;Take a look&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Sunny girl walking down</title>
      <link>http://localhost:8080/articles/20160214-sunny-girl%20walking%20down/</link>
      <pubDate>Sat, 16 May 2015 08:00:00 +0800</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/20160214-sunny-girl%20walking%20down/</guid>
      <author></author>
      <description>&lt;p&gt;A girl walking to the school on sunny day&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/20160214-sunny-girl%20walking%20down/preview.png&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>The sweet sweet honeycomb</title>
      <link>http://localhost:8080/articles/20150402-sweet-honeycomb/</link>
      <pubDate>Thu, 02 Apr 2015 08:00:00 +0800</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/20150402-sweet-honeycomb/</guid>
      <author></author>
      <description>&lt;p&gt;This is a English learning honeycomb show. The key is the fragments fly-in effects. Three rhombus make up a hexagon. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/20150402-sweet-honeycomb/preview.png&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://localhost:8080/honeycomb/index.html&quot;&gt;Take a look&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>JavaScript Apply, Call, and Bind</title>
      <link>http://localhost:8080/articles/201310-js-apply-call-bind/</link>
      <pubDate>Thu, 10 Oct 2013 08:00:00 +0800</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/201310-js-apply-call-bind/</guid>
      <author></author>
      <description>&lt;p&gt;We will discuss every scenario in which we use these three methods in JavaScript. While Apply and Call come with ECMAScript 3 (available on IE 6, 7, 8, and modern browsers), ECMAScript 5 (available on only modern browsers) added the Bind method. These 3 Function methods are workhorses and sometimes you absolutely need one of them. Let’s begin with the Bind method. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/201310-js-apply-call-bind/preview.png&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;bind-&quot;&gt;Bind()&lt;/h2&gt;
&lt;h3 id=&quot;javascript-s-bind-allows-us-to-set-the-this-value-on-methods-&quot;&gt;JavaScript’s Bind Allows Us to Set the this Value on Methods &lt;/h3&gt;
&lt;p&gt;When the button below is clicked, the text field is populated with a random name.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var user = {
    data :[
        {name:&amp;quot;T. Woods&amp;quot;, age:37},
        {name:&amp;quot;P. Mickelson&amp;quot;, age:43}
    ],
    clickHandler:function (event) {
        var randomNum = ((Math.random () * 2 | 0) + 1) - 1; // random number between 0 and 1
        // This line is adding a random person from the data array to the text field
        $(&amp;quot;input&amp;quot;).val (this.data[randomNum].name + &amp;quot; &amp;quot; + this.data[randomNum].age);
    }
}
​// Assign an eventHandler to the button&amp;#39;s click event
$ (&amp;quot;button&amp;quot;).click (user.clickHandler);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When you click the button, you get an error because this in the clickHandler () method is bound to the button HTML element, since that is the object that the clickHandler method is executed on.&lt;/p&gt;
&lt;p&gt;This particular problem is quite common in JavaScript, and JavaScript frameworks like Backbone.js and libraries like jQuery automatically do the bindings for us, so that this is always bound to the object we expect it to be bound to.&lt;/p&gt;
&lt;p&gt;To fix the problem in the preceding example, we can use the bind method thus:
Instead of this line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; $ (&amp;quot;button&amp;quot;).click (user.clickHandler.bind (user));
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;bind-allows-us-to-borrow-methods&quot;&gt;Bind() Allows us to &lt;strong&gt;Borrow&lt;/strong&gt; Methods&lt;/h3&gt;
&lt;p&gt;In JavaScript, we can pass functions around, return them, borrow them, and the like. And the bind () method makes it super easy to borrow methods.&lt;/p&gt;
&lt;p&gt;Here is an example using bind () to borrow a method:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    var cars = {
            data:[
                {name:&amp;quot;Honda Accord&amp;quot;, age:14},
                {name:&amp;quot;Tesla Model S&amp;quot;, age:2}
            ]
        }
    // We can borrow the showData () method from the user object we defined in the last example.
    // Here we bind the user.showData method to the cars object we just created.
    cars.showData = user.showData.bind (cars);
    cars.showData(); // Honda Accord 14
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;One problem with this example is that we are adding a new method (showData) on the cars object and we might not want to do that just to borrow a method because the cars object might already have a property or method name showData. We don’t want to overwrite it accidentally. As we will see in our discussion of Apply and Call below, it is best to borrow a method using either the Apply or Call method. &lt;/p&gt;
&lt;h3 id=&quot;javascript-s-bind-allows-us-to-curry-a-function-&quot;&gt;JavaScript’s Bind Allows Us to Curry a Function &lt;/h3&gt;
&lt;p&gt;Function Currying, also known as partial function application, is the use of a function (that accept one or more arguments) that returns a new function with some of the arguments already set. The function that is returned has access to the stored arguments and variables of the outer function. This sounds way more complex than it actually is, so let’s code.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//So we are passing null because we are not using the &amp;quot;this&amp;quot; keyword in our greet function.​
var greetAnAdultMale = greet.bind (null, &amp;quot;male&amp;quot;, 45);
greetAnAdultMale (&amp;quot;John Hartlove&amp;quot;); // &amp;quot;Hello, Mr. John Hartlove.&amp;quot;​
var greetAYoungster = greet.bind (null, &amp;quot;&amp;quot;, 16);
greetAYoungster (&amp;quot;Alex&amp;quot;); // &amp;quot;Hey, Alex.&amp;quot;​
greetAYoungster (&amp;quot;Emma Waterloo&amp;quot;); // &amp;quot;Hey, Emma Waterloo.&amp;quot;​
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;javascript-s-apply-and-call-methods&quot;&gt;JavaScript’s Apply and Call Methods&lt;/h2&gt;
&lt;p&gt;The Apply and Call methods are two of the most often used Function methods in JavaScript, and for good reason: they allow us to borrow functions and set the this value in function invocation. In addition, the apply function in particular allows us to execute a function with an array of parameters, such that each parameter is passed to the function individually when the function executes—great for variadic functions; a variadic function takes varying number of arguments, not a set number of arguments as most functions do.&lt;/p&gt;
&lt;h3 id=&quot;set-the-this-value-with-apply-or-call&quot;&gt;Set the this value with Apply or Call&lt;/h3&gt;
&lt;p&gt;Just as in the bind () example, we can also set the this value when invoking functions by using the Apply or Call methods. The first parameter in the call and apply methods set the this value to the object that the function is invoked upon.&lt;/p&gt;
&lt;p&gt;Here is a very quick, illustrative example for starters before we get into more complex usages of Apply and Call:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    // global variable for demonstration​
    var avgScore = &amp;quot;global avgScore&amp;quot;;
    //global function​
    function avg (arrayOfScores) {
        // Add all the scores and return the total​
        var sumOfScores = arrayOfScores.reduce (function (prev, cur, index, array) {
            return prev + cur;
        });
        // The &amp;quot;this&amp;quot; keyword here will be bound to the global object, unless we set the &amp;quot;this&amp;quot; with Call or Apply​
        this.avgScore = sumOfScores / arrayOfScores.length;
    }
    var gameController = {
        scores  :[20, 34, 55, 46, 77],
        avgScore:null​
    }
    // If we execute the avg function thus, &amp;quot;this&amp;quot; inside the function is bound to the global window object:​
    avg (gameController.scores);
    // Proof that the avgScore was set on the global window object​
    console.log (window.avgScore); // 46.4​
    console.log (gameController.avgScore); // null​
    // reset the global avgScore​
    avgScore = &amp;quot;global avgScore&amp;quot;;
    // To set the &amp;quot;this&amp;quot; value explicitly, so that &amp;quot;this&amp;quot; is bound to the gameController,​
    // We use the call () method:​
    avg.call (gameController, gameController.scores);
    console.log (window.avgScore); //global avgScore​
    console.log (gameController.avgScore); // 46.4​
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that the first argument to call () sets the this value. In the preceding example, it is set to the gameController object. The other arguments after the first argument are passed as parameters to the avg () function.&lt;br&gt;The apply and call methods are almost identical when setting the this value except that you pass the function parameters to apply () as an array, while you have to list the parameters individually to pass them to the call () method. More on this follows. Meanwhile, the apply () method also has another feature that the call () method doesn’t have, as we will soon see.&lt;/p&gt;
&lt;h4 id=&quot;use-call-or-apply-to-set-this-in-callback-functions&quot;&gt;Use Call or Apply To Set this in Callback Functions&lt;/h4&gt;
&lt;p&gt;The Apply, Call, and Bind methods are all used to set the this value when invoking a method, and they do it in slightly different ways to allow use direct control and versatility in our JavaScript code. The this value in JavaScript is as important as any other part of the language, and we have the 3 aforementioned methods are the essential tools to setting and using this effectively and properly.&lt;/p&gt;
&lt;h2 id=&quot;borrowing-functions-with-apply-and-call-a-must-know-&quot;&gt;Borrowing Functions with Apply and Call (A Must Know)&lt;/h2&gt;
&lt;p&gt;The most common use for the Apply and Call methods in JavaScript is probably to borrow functions. We can borrow functions with the Apply and Call methods just as we did with the bind method, but in a more versatile manner.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Markdown syntax</title>
      <link>http://localhost:8080/articles/markdown-syntax/</link>
      <pubDate>Thu, 02 Feb 2012 08:00:00 +0800</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/markdown-syntax/</guid>
      <author></author>
      <description>&lt;p&gt;Full markdown syntax taken from John Gruber’s &lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;Daring Fireball&lt;/a&gt;.
Did you know that 9 out of 10 bloggers prefer to write in markdown?&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;markdown-syntax&quot;&gt;Markdown: Syntax&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#overview&quot;&gt;Overview&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#philosophy&quot;&gt;Philosophy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#html&quot;&gt;Inline HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#autoescape&quot;&gt;Automatic Escaping for Special Characters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#block&quot;&gt;Block Elements&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#p&quot;&gt;Paragraphs and Line Breaks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#header&quot;&gt;Headers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#blockquote&quot;&gt;Blockquotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#list&quot;&gt;Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#precode&quot;&gt;Code Blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#hr&quot;&gt;Horizontal Rules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#span&quot;&gt;Span Elements&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#link&quot;&gt;Links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#em&quot;&gt;Emphasis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#code&quot;&gt;Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#img&quot;&gt;Images&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#misc&quot;&gt;Miscellaneous&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#backslash&quot;&gt;Backslash Escapes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#autolink&quot;&gt;Automatic Links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This document is itself written using Markdown; you
can &lt;a href=&quot;http://localhost:8080/projects/markdown/syntax.text&quot;&gt;see the source for it by adding ‘.text’ to the URL&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;philosophy&quot;&gt;Philosophy&lt;/h3&gt;

&lt;p&gt;Markdown is intended to be as easy-to-read and easy-to-write as is feasible.&lt;/p&gt;
&lt;p&gt;Readability, however, is emphasized above all else. A Markdown-formatted
document should be publishable as-is, as plain text, without looking
like it’s been marked up with tags or formatting instructions. While
Markdown’s syntax has been influenced by several existing text-to-HTML
filters – including &lt;a href=&quot;http://docutils.sourceforge.net/mirror/setext.html&quot;&gt;Setext&lt;/a&gt;, &lt;a href=&quot;http://www.aaronsw.com/2002/atx/&quot;&gt;atx&lt;/a&gt;, &lt;a href=&quot;http://textism.com/tools/textile/&quot;&gt;Textile&lt;/a&gt;, &lt;a href=&quot;http://docutils.sourceforge.net/rst.html&quot;&gt;reStructuredText&lt;/a&gt;,
&lt;a href=&quot;http://www.triptico.com/software/grutatxt.html&quot;&gt;Grutatext&lt;/a&gt;, and &lt;a href=&quot;http://ettext.taint.org/doc/&quot;&gt;EtText&lt;/a&gt; – the single biggest source of
inspiration for Markdown’s syntax is the format of plain text email.&lt;/p&gt;
&lt;p&gt;To this end, Markdown’s syntax is comprised entirely of punctuation
characters, which punctuation characters have been carefully chosen so
as to look like what they mean. E.g., asterisks around a word actually
look like *emphasis*. Markdown lists look like, well, lists. Even
blockquotes look like quoted passages of text, assuming you’ve ever
used email.&lt;/p&gt;
&lt;h3 id=&quot;html&quot;&gt;Inline HTML&lt;/h3&gt;

&lt;p&gt;Markdown’s syntax is intended for one purpose: to be used as a
format for &lt;em&gt;writing&lt;/em&gt; for the web.&lt;/p&gt;
&lt;p&gt;Markdown is not a replacement for HTML, or even close to it. Its
syntax is very small, corresponding only to a very small subset of
HTML tags. The idea is &lt;em&gt;not&lt;/em&gt; to create a syntax that makes it easier
to insert HTML tags. In my opinion, HTML tags are already easy to
insert. The idea for Markdown is to make it easy to read, write, and
edit prose. HTML is a &lt;em&gt;publishing&lt;/em&gt; format; Markdown is a &lt;em&gt;writing&lt;/em&gt;
format. Thus, Markdown’s formatting syntax only addresses issues that
can be conveyed in plain text.&lt;/p&gt;
&lt;p&gt;For any markup that is not covered by Markdown’s syntax, you simply
use HTML itself. There’s no need to preface it or delimit it to
indicate that you’re switching from Markdown to HTML; you just use
the tags.&lt;/p&gt;
&lt;p&gt;The only restrictions are that block-level HTML elements – e.g. &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;,
&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;, etc. – must be separated from surrounding
content by blank lines, and the start and end tags of the block should
not be indented with tabs or spaces. Markdown is smart enough not
to add extra (unwanted) &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags around HTML block-level tags.&lt;/p&gt;
&lt;p&gt;For example, to add an HTML table to a Markdown article:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is a regular paragraph.

&amp;lt;table&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;Foo&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;

This is another regular paragraph.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that Markdown formatting syntax is not processed within block-level
HTML tags. E.g., you can’t use Markdown-style &lt;code&gt;*emphasis*&lt;/code&gt; inside an
HTML block.&lt;/p&gt;
&lt;p&gt;Span-level HTML tags – e.g. &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; – can be
used anywhere in a Markdown paragraph, list item, or header. If you
want, you can even use HTML tags instead of Markdown formatting; e.g. if
you’d prefer to use HTML &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tags instead of Markdown’s
link or image syntax, go right ahead.&lt;/p&gt;
&lt;p&gt;Unlike block-level HTML tags, Markdown syntax &lt;em&gt;is&lt;/em&gt; processed within
span-level tags.&lt;/p&gt;
&lt;h3 id=&quot;autoescape&quot;&gt;Automatic Escaping for Special Characters&lt;/h3&gt;

&lt;p&gt;In HTML, there are two characters that demand special treatment: &lt;code&gt;&amp;lt;&lt;/code&gt;
and &lt;code&gt;&amp;amp;&lt;/code&gt;. Left angle brackets are used to start tags; ampersands are
used to denote HTML entities. If you want to use them as literal
characters, you must escape them as entities, e.g. &lt;code&gt;&amp;amp;lt;&lt;/code&gt;, and
&lt;code&gt;&amp;amp;amp;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ampersands in particular are bedeviling for web writers. If you want to
write about ‘AT&amp;amp;T’, you need to write ‘&lt;code&gt;AT&amp;amp;amp;T&lt;/code&gt;‘. You even need to
escape ampersands within URLs. Thus, if you want to link to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://images.google.com/images?num=30&amp;amp;q=larry+bird
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;you need to encode the URL as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://images.google.com/images?num=30&amp;amp;amp;q=larry+bird
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;in your anchor tag &lt;code&gt;href&lt;/code&gt; attribute. Needless to say, this is easy to
forget, and is probably the single most common source of HTML validation
errors in otherwise well-marked-up web sites.&lt;/p&gt;
&lt;p&gt;Markdown allows you to use these characters naturally, taking care of
all the necessary escaping for you. If you use an ampersand as part of
an HTML entity, it remains unchanged; otherwise it will be translated
into &lt;code&gt;&amp;amp;amp;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, if you want to include a copyright symbol in your article, you can write:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;amp;copy;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and Markdown will leave it alone. But if you write:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AT&amp;amp;T
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Markdown will translate it to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AT&amp;amp;amp;T
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Similarly, because Markdown supports &lt;a href=&quot;#html&quot;&gt;inline HTML&lt;/a&gt;, if you use
angle brackets as delimiters for HTML tags, Markdown will treat them as
such. But if you write:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4 &amp;lt; 5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Markdown will translate it to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4 &amp;amp;lt; 5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, inside Markdown code spans and blocks, angle brackets and
ampersands are &lt;em&gt;always&lt;/em&gt; encoded automatically. This makes it easy to use
Markdown to write about HTML code. (As opposed to raw HTML, which is a
terrible format for writing about HTML syntax, because every single &lt;code&gt;&amp;lt;&lt;/code&gt;
and &lt;code&gt;&amp;amp;&lt;/code&gt; in your example code needs to be escaped.)&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;block&quot;&gt;Block Elements&lt;/h2&gt;


&lt;h3 id=&quot;p&quot;&gt;Paragraphs and Line Breaks&lt;/h3&gt;

&lt;p&gt;A paragraph is simply one or more consecutive lines of text, separated
by one or more blank lines. (A blank line is any line that looks like a
blank line – a line containing nothing but spaces or tabs is considered
blank.) Normal paragraphs should not be indented with spaces or tabs.&lt;/p&gt;
&lt;p&gt;The implication of the “one or more consecutive lines of text” rule is
that Markdown supports “hard-wrapped” text paragraphs. This differs
significantly from most other text-to-HTML formatters (including Movable
Type’s “Convert Line Breaks” option) which translate every line break
character in a paragraph into a &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;When you &lt;em&gt;do&lt;/em&gt; want to insert a &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; break tag using Markdown, you
end a line with two or more spaces, then type return.&lt;/p&gt;
&lt;p&gt;Yes, this takes a tad more effort to create a &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt;, but a simplistic
“every line break is a &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt;“ rule wouldn’t work for Markdown.
Markdown’s email-style &lt;a href=&quot;#blockquote&quot;&gt;blockquoting&lt;/a&gt; and multi-paragraph &lt;a href=&quot;#list&quot;&gt;list items&lt;/a&gt;
work best – and look better – when you format them with hard breaks.&lt;/p&gt;
&lt;h3 id=&quot;header&quot;&gt;Headers&lt;/h3&gt;

&lt;p&gt;Markdown supports two styles of headers, &lt;a href=&quot;http://docutils.sourceforge.net/mirror/setext.html&quot;&gt;Setext&lt;/a&gt; and &lt;a href=&quot;http://www.aaronsw.com/2002/atx/&quot;&gt;atx&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Setext-style headers are “underlined” using equal signs (for first-level
headers) and dashes (for second-level headers). For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is an H1
=============

This is an H2
-------------
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Any number of underlining &lt;code&gt;=&lt;/code&gt;‘s or &lt;code&gt;-&lt;/code&gt;‘s will work.&lt;/p&gt;
&lt;p&gt;Atx-style headers use 1-6 hash characters at the start of the line,
corresponding to header levels 1-6. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# This is an H1

## This is an H2

###### This is an H6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Optionally, you may “close” atx-style headers. This is purely
cosmetic – you can use this if you think it looks better. The
closing hashes don’t even need to match the number of hashes
used to open the header. (The number of opening hashes
determines the header level.) :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# This is an H1 #

## This is an H2 ##

### This is an H3 ######
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;blockquote&quot;&gt;Blockquotes&lt;/h3&gt;

&lt;p&gt;Markdown uses email-style &lt;code&gt;&amp;gt;&lt;/code&gt; characters for blockquoting. If you’re
familiar with quoting passages of text in an email message, then you
know how to create a blockquote in Markdown. It looks best if you hard
wrap the text and put a &lt;code&gt;&amp;gt;&lt;/code&gt; before every line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
&amp;gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&amp;gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&amp;gt;
&amp;gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
&amp;gt; id sem consectetuer libero luctus adipiscing.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Markdown allows you to be lazy and only put the &lt;code&gt;&amp;gt;&lt;/code&gt; before the first
line of a hard-wrapped paragraph:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

&amp;gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by
adding additional levels of &lt;code&gt;&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; This is the first level of quoting.
&amp;gt;
&amp;gt; &amp;gt; This is nested blockquote.
&amp;gt;
&amp;gt; Back to the first level.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Blockquotes can contain other Markdown elements, including headers, lists,
and code blocks:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;this-is-a-header-&quot;&gt;This is a header.&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;This is the first list item.&lt;/li&gt;
&lt;li&gt;This is the second list item.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s some example code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return shell_exec(&amp;quot;echo $input | $markdown_script&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;Any decent text editor should make email-style quoting easy. For
example, with BBEdit, you can make a selection and choose Increase
Quote Level from the Text menu.&lt;/p&gt;
&lt;h3 id=&quot;list&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Markdown supports ordered (numbered) and unordered (bulleted) lists.&lt;/p&gt;
&lt;p&gt;Unordered lists use asterisks, pluses, and hyphens – interchangably
– as list markers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   Red
*   Green
*   Blue
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;is equivalent to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+   Red
+   Green
+   Blue
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-   Red
-   Green
-   Blue
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ordered lists use numbers followed by periods:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.  Bird
2.  McHale
3.  Parish
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It’s important to note that the actual numbers you use to mark the
list have no effect on the HTML output Markdown produces. The HTML
Markdown produces from the above list is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;Bird&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;McHale&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Parish&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you instead wrote the list in Markdown like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.  Bird
1.  McHale
1.  Parish
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or even:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;3. Bird
1. McHale
8. Parish
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;you’d get the exact same HTML output. The point is, if you want to,
you can use ordinal numbers in your ordered Markdown lists, so that
the numbers in your source match the numbers in your published HTML.
But if you want to be lazy, you don’t have to.&lt;/p&gt;
&lt;p&gt;If you do use lazy list numbering, however, you should still start the
list with the number 1. At some point in the future, Markdown may support
starting ordered lists at an arbitrary number.&lt;/p&gt;
&lt;p&gt;List markers typically start at the left margin, but may be indented by
up to three spaces. List markers must be followed by one or more spaces
or a tab.&lt;/p&gt;
&lt;p&gt;To make lists look nice, you can wrap items with hanging indents:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But if you want to be lazy, you don’t have to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If list items are separated by blank lines, Markdown will wrap the
items in &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags in the HTML output. For example, this input:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   Bird
*   Magic
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will turn into:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Bird&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Magic&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   Bird

*   Magic
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will turn into:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Bird&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Magic&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;List items may consist of multiple paragraphs. Each subsequent
paragraph in a list item must be indented by either 4 spaces
or one tab:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.  This is a list item with two paragraphs. Lorem ipsum dolor
    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
    mi posuere lectus.

    Vestibulum enim wisi, viverra nec, fringilla in, laoreet
    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
    sit amet velit.

2.  Suspendisse id sem consectetuer libero luctus adipiscing.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It looks nice if you indent every line of the subsequent
paragraphs, but here again, Markdown will allow you to be
lazy:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   This is a list item with two paragraphs.

    This is the second paragraph in the list item. You&amp;#39;re
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another item in the same list.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To put a blockquote within a list item, the blockquote’s &lt;code&gt;&amp;gt;&lt;/code&gt;
delimiters need to be indented:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   A list item with a blockquote:

    &amp;gt; This is a blockquote
    &amp;gt; inside a list item.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To put a code block within a list item, the code block needs
to be indented &lt;em&gt;twice&lt;/em&gt; – 8 spaces or two tabs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   A list item with a code block:

        &amp;lt;code goes here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It’s worth noting that it’s possible to trigger an ordered list by
accident, by writing something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1986. What a great season.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In other words, a &lt;em&gt;number-period-space&lt;/em&gt; sequence at the beginning of a
line. To avoid this, you can backslash-escape the period:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1986\. What a great season.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;precode&quot;&gt;Code Blocks&lt;/h3&gt;

&lt;p&gt;Pre-formatted code blocks are used for writing about programming or
markup source code. Rather than forming normal paragraphs, the lines
of a code block are interpreted literally. Markdown wraps a code block
in both &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
&lt;p&gt;To produce a code block in Markdown, simply indent every line of the
block by at least 4 spaces or 1 tab. For example, given this input:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is a normal paragraph:

    This is a code block.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Markdown will generate:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;This is a normal paragraph:&amp;lt;/p&amp;gt;

&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;This is a code block.
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;One level of indentation – 4 spaces or 1 tab – is removed from each
line of the code block. For example, this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Here is an example of AppleScript:

    tell application &amp;quot;Foo&amp;quot;
        beep
    end tell
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will turn into:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;Here is an example of AppleScript:&amp;lt;/p&amp;gt;

&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;tell application &amp;quot;Foo&amp;quot;
    beep
end tell
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A code block continues until it reaches a line that is not indented
(or the end of the article).&lt;/p&gt;
&lt;p&gt;Within a code block, ampersands (&lt;code&gt;&amp;amp;&lt;/code&gt;) and angle brackets (&lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;)
are automatically converted into HTML entities. This makes it very
easy to include example HTML source code using Markdown – just paste
it and indent it, and Markdown will handle the hassle of encoding the
ampersands and angle brackets. For example, this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;
        &amp;amp;copy; 2004 Foo Corporation
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will turn into:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&amp;amp;lt;div class=&amp;quot;footer&amp;quot;&amp;amp;gt;
    &amp;amp;amp;copy; 2004 Foo Corporation
&amp;amp;lt;/div&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Regular Markdown syntax is not processed within code blocks. E.g.,
asterisks are just literal asterisks within a code block. This means
it’s also easy to use Markdown to write about Markdown’s own syntax.&lt;/p&gt;
&lt;h3 id=&quot;hr&quot;&gt;Horizontal Rules&lt;/h3&gt;

&lt;p&gt;You can produce a horizontal rule tag (&lt;code&gt;&amp;lt;hr /&amp;gt;&lt;/code&gt;) by placing three or
more hyphens, asterisks, or underscores on a line by themselves. If you
wish, you may use spaces between the hyphens or asterisks. Each of the
following lines will produce a horizontal rule:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* * *

***

*****

- - -

---------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;span&quot;&gt;Span Elements&lt;/h2&gt;

&lt;h3 id=&quot;link&quot;&gt;Links&lt;/h3&gt;

&lt;p&gt;Markdown supports two style of links: &lt;em&gt;inline&lt;/em&gt; and &lt;em&gt;reference&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In both styles, the link text is delimited by [square brackets].&lt;/p&gt;
&lt;p&gt;To create an inline link, use a set of regular parentheses immediately
after the link text’s closing square bracket. Inside the parentheses,
put the URL where you want the link to point, along with an &lt;em&gt;optional&lt;/em&gt;
title for the link, surrounded in quotes. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is [an example](http://example.com/ &amp;quot;Title&amp;quot;) inline link.

[This link](http://example.net/) has no title attribute.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Will produce:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;This is &amp;lt;a href=&amp;quot;http://example.com/&amp;quot; title=&amp;quot;Title&amp;quot;&amp;gt;
an example&amp;lt;/a&amp;gt; inline link.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://example.net/&amp;quot;&amp;gt;This link&amp;lt;/a&amp;gt; has no
title attribute.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you’re referring to a local resource on the same server, you can
use relative paths:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;See my [About](/about/) page for details.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Reference-style links use a second set of square brackets, inside
which you place a label of your choosing to identify the link:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is [an example][id] reference-style link.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can optionally use a space to separate the sets of brackets:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is [an example] [id] reference-style link.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, anywhere in the document, you define your link label like this,
on a line by itself:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[id]: http://example.com/  &amp;quot;Optional Title Here&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Square brackets containing the link identifier (optionally
indented from the left margin using up to three spaces);&lt;/li&gt;
&lt;li&gt;followed by a colon;&lt;/li&gt;
&lt;li&gt;followed by one or more spaces (or tabs);&lt;/li&gt;
&lt;li&gt;followed by the URL for the link;&lt;/li&gt;
&lt;li&gt;optionally followed by a title attribute for the link, enclosed
in double or single quotes, or enclosed in parentheses.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following three link definitions are equivalent:&lt;/p&gt;
&lt;p&gt;  &lt;a href=&quot;http://example.com/&quot; title=&quot;Optional Title Here&quot;&gt;foo&lt;/a&gt;: &lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;  ‘Optional Title Here’&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There is a known bug in Markdown.pl 1.0.1 which prevents
single quotes from being used to delimit link titles.&lt;/p&gt;
&lt;p&gt;The link URL may, optionally, be surrounded by angle brackets:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[id]: &amp;lt;http://example.com/&amp;gt;  &amp;quot;Optional Title Here&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can put the title attribute on the next line and use extra spaces
or tabs for padding, which tends to look better with longer URLs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[id]: http://example.com/longish/path/to/resource/here
    &amp;quot;Optional Title Here&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Link definitions are only used for creating links during Markdown
processing, and are stripped from your document in the HTML output.&lt;/p&gt;
&lt;p&gt;Link definition names may consist of letters, numbers, spaces, and
punctuation – but they are &lt;em&gt;not&lt;/em&gt; case sensitive. E.g. these two
links:&lt;/p&gt;
&lt;p&gt;  [link text][a]
  [link text][A]&lt;/p&gt;
&lt;p&gt;are equivalent.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;implicit link name&lt;/em&gt; shortcut allows you to omit the name of the
link, in which case the link text itself is used as the name.
Just use an empty set of square brackets – e.g., to link the word
“Google” to the google.com web site, you could simply write:&lt;/p&gt;
&lt;p&gt;  &lt;a href=&quot;http://google.com/&quot;&gt;Google&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And then define the link:&lt;/p&gt;
&lt;p&gt;Because link names may contain spaces, this shortcut even works for
multiple words in the link text:&lt;/p&gt;
&lt;p&gt;  Visit &lt;a href=&quot;http://daringfireball.net/&quot;&gt;Daring Fireball&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;And then define the link:&lt;/p&gt;
&lt;p&gt;Link definitions can be placed anywhere in your Markdown document. I
tend to put them immediately after each paragraph in which they’re
used, but if you want, you can put them all at the end of your
document, sort of like footnotes.&lt;/p&gt;
&lt;p&gt;Here’s an example of reference links in action:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        &amp;quot;Google&amp;quot;
  [2]: http://search.yahoo.com/  &amp;quot;Yahoo Search&amp;quot;
  [3]: http://search.msn.com/    &amp;quot;MSN Search&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using the implicit link name shortcut, you could instead write:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        &amp;quot;Google&amp;quot;
  [yahoo]:  http://search.yahoo.com/  &amp;quot;Yahoo Search&amp;quot;
  [msn]:    http://search.msn.com/    &amp;quot;MSN Search&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Both of the above examples will produce the following HTML output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;I get 10 times more traffic from &amp;lt;a href=&amp;quot;http://google.com/&amp;quot;
title=&amp;quot;Google&amp;quot;&amp;gt;Google&amp;lt;/a&amp;gt; than from
&amp;lt;a href=&amp;quot;http://search.yahoo.com/&amp;quot; title=&amp;quot;Yahoo Search&amp;quot;&amp;gt;Yahoo&amp;lt;/a&amp;gt;
or &amp;lt;a href=&amp;quot;http://search.msn.com/&amp;quot; title=&amp;quot;MSN Search&amp;quot;&amp;gt;MSN&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For comparison, here is the same paragraph written using
Markdown’s inline link style:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;I get 10 times more traffic from [Google](http://google.com/ &amp;quot;Google&amp;quot;)
than from [Yahoo](http://search.yahoo.com/ &amp;quot;Yahoo Search&amp;quot;) or
[MSN](http://search.msn.com/ &amp;quot;MSN Search&amp;quot;).
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The point of reference-style links is not that they’re easier to
write. The point is that with reference-style links, your document
source is vastly more readable. Compare the above examples: using
reference-style links, the paragraph itself is only 81 characters
long; with inline-style links, it’s 176 characters; and as raw HTML,
it’s 234 characters. In the raw HTML, there’s more markup than there
is text.&lt;/p&gt;
&lt;p&gt;With Markdown’s reference-style links, a source document much more
closely resembles the final output, as rendered in a browser. By
allowing you to move the markup-related metadata out of the paragraph,
you can add links without interrupting the narrative flow of your
prose.&lt;/p&gt;
&lt;h3 id=&quot;em&quot;&gt;Emphasis&lt;/h3&gt;

&lt;p&gt;Markdown treats asterisks (&lt;code&gt;*&lt;/code&gt;) and underscores (&lt;code&gt;_&lt;/code&gt;) as indicators of
emphasis. Text wrapped with one &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;_&lt;/code&gt; will be wrapped with an
HTML &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; tag; double &lt;code&gt;*&lt;/code&gt;‘s or &lt;code&gt;_&lt;/code&gt;‘s will be wrapped with an HTML
&lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; tag. E.g., this input:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*single asterisks*

_single underscores_

**double asterisks**

__double underscores__
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will produce:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;em&amp;gt;single asterisks&amp;lt;/em&amp;gt;

&amp;lt;em&amp;gt;single underscores&amp;lt;/em&amp;gt;

&amp;lt;strong&amp;gt;double asterisks&amp;lt;/strong&amp;gt;

&amp;lt;strong&amp;gt;double underscores&amp;lt;/strong&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can use whichever style you prefer; the lone restriction is that
the same character must be used to open and close an emphasis span.&lt;/p&gt;
&lt;p&gt;Emphasis can be used in the middle of a word:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;un*frigging*believable
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But if you surround an &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;_&lt;/code&gt; with spaces, it’ll be treated as a
literal asterisk or underscore.&lt;/p&gt;
&lt;p&gt;To produce a literal asterisk or underscore at a position where it
would otherwise be used as an emphasis delimiter, you can backslash
escape it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;\*this text is surrounded by literal asterisks\*
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;To indicate a span of code, wrap it with backtick quotes (&lt;code&gt;` &lt;/code&gt;).
Unlike a pre-formatted code block, a code span indicates code within a
normal paragraph. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Use the `printf()` function.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will produce:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;Use the &amp;lt;code&amp;gt;printf()&amp;lt;/code&amp;gt; function.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To include a literal backtick character within a code span, you can use
multiple backticks as the opening and closing delimiters:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;``There is a literal backtick (`) here.``
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which will produce this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;There is a literal backtick (`) here.&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The backtick delimiters surrounding a code span may include spaces –
one after the opening, one before the closing. This allows you to place
literal backtick characters at the beginning or end of a code span:&lt;/p&gt;
&lt;p&gt;  A single backtick in a code span: &lt;code&gt;` &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  A backtick-delimited string in a code span: &lt;code&gt;`foo` &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;will produce:&lt;/p&gt;
  &lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;&lt;code&gt;foo&lt;/code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With a code span, ampersands and angle brackets are encoded as HTML
entities automatically, which makes it easy to include example HTML
tags. Markdown will turn this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Please don&amp;#39;t use any `&amp;lt;blink&amp;gt;` tags.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;into:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;Please don&amp;#39;t use any &amp;lt;code&amp;gt;&amp;amp;lt;blink&amp;amp;gt;&amp;lt;/code&amp;gt; tags.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can write this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`&amp;amp;#8212;` is the decimal-encoded equivalent of `&amp;amp;mdash;`.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;to produce:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;&amp;amp;amp;#8212;&amp;lt;/code&amp;gt; is the decimal-encoded
equivalent of &amp;lt;code&amp;gt;&amp;amp;amp;mdash;&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;img&quot;&gt;Images&lt;/h3&gt;

&lt;p&gt;Admittedly, it’s fairly difficult to devise a “natural” syntax for
placing images into a plain text document format.&lt;/p&gt;
&lt;p&gt;Markdown uses an image syntax that is intended to resemble the syntax
for links, allowing for two styles: &lt;em&gt;inline&lt;/em&gt; and &lt;em&gt;reference&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Inline image syntax looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg &amp;quot;Optional title&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An exclamation mark: &lt;code&gt;!&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;followed by a set of square brackets, containing the &lt;code&gt;alt&lt;/code&gt;
attribute text for the image;&lt;/li&gt;
&lt;li&gt;followed by a set of parentheses, containing the URL or path to
the image, and an optional &lt;code&gt;title&lt;/code&gt; attribute enclosed in double
or single quotes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Reference-style image syntax looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![Alt text][id]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Where “id” is the name of a defined image reference. Image references
are defined using syntax identical to link references:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[id]: url/to/image  &amp;quot;Optional title attribute&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As of this writing, Markdown has no syntax for specifying the
dimensions of an image; if this is important to you, you can simply
use regular HTML &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;misc&quot;&gt;Miscellaneous&lt;/h2&gt;

&lt;h3 id=&quot;autolink&quot;&gt;Automatic Links&lt;/h3&gt;

&lt;p&gt;Markdown supports a shortcut style for creating “automatic” links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;http://example.com/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Markdown will turn this into:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;http://example.com/&amp;quot;&amp;gt;http://example.com/&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Automatic links for email addresses work similarly, except that
Markdown will also perform a bit of randomized decimal and hex
entity-encoding to help obscure your address from address-harvesting
spambots. For example, Markdown will turn this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;address@example.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;into something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;&amp;amp;#x6D;&amp;amp;#x61;i&amp;amp;#x6C;&amp;amp;#x74;&amp;amp;#x6F;:&amp;amp;#x61;&amp;amp;#x64;&amp;amp;#x64;&amp;amp;#x72;&amp;amp;#x65;
&amp;amp;#115;&amp;amp;#115;&amp;amp;#64;&amp;amp;#101;&amp;amp;#120;&amp;amp;#x61;&amp;amp;#109;&amp;amp;#x70;&amp;amp;#x6C;e&amp;amp;#x2E;&amp;amp;#99;&amp;amp;#111;
&amp;amp;#109;&amp;quot;&amp;gt;&amp;amp;#x61;&amp;amp;#x64;&amp;amp;#x64;&amp;amp;#x72;&amp;amp;#x65;&amp;amp;#115;&amp;amp;#115;&amp;amp;#64;&amp;amp;#101;&amp;amp;#120;&amp;amp;#x61;
&amp;amp;#109;&amp;amp;#x70;&amp;amp;#x6C;e&amp;amp;#x2E;&amp;amp;#99;&amp;amp;#111;&amp;amp;#109;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which will render in a browser as a clickable link to “address@example.com”.&lt;/p&gt;
&lt;p&gt;(This sort of entity-encoding trick will indeed fool many, if not
most, address-harvesting bots, but it definitely won’t fool all of
them. It’s better than nothing, but an address published in this way
will probably eventually start receiving spam.)&lt;/p&gt;
&lt;h3 id=&quot;backslash&quot;&gt;Backslash Escapes&lt;/h3&gt;

&lt;p&gt;Markdown allows you to use backslash escapes to generate literal
characters which would otherwise have special meaning in Markdown’s
formatting syntax. For example, if you wanted to surround a word
with literal asterisks (instead of an HTML &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; tag), you can use
backslashes before the asterisks, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;\*literal asterisks\*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Markdown provides backslash escapes for the following characters:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;\   backslash
`   backtick
*   asterisk
_   underscore
{}  curly braces
[]  square brackets
()  parentheses
#   hash mark
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;plus sign&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;minus sign (hyphen)
.   dot
!   exclamation mark&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
  </channel>
</rss>